题目：
给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
代码：
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        target = ListNode(0) # 目标链表
        p = target
        add = 0 # 是否进位的标志
        while l1 and l2:
            p.next = ListNode((l1.val + l2.val + add)%10)
            add = (l1.val + l2.val + add)/10
            l1, l2, p = l1.next, l2.next, p.next
        while add:
            if l1==None and l2!=None:
                p.next = ListNode((l2.val + add)%10)
                add = ((l2.val + add)/10)
                l2 = l2.next
            elif l1!=None and l2==None:
                p.next = ListNode((l1.val + add)%10)
                add = ((l1.val + add)/10)
                l1 = l1.next
            else:
                p.next = ListNode(add)
                add = 0
            p = p.next
        if add==0 and l1!=None:
            p.next = l1
        elif add ==0 and l2!=None:
            p.next = l2
        return target.next
方案：用链表实现，两数相加，看是否需要进位，如果不需要进位，直接保存到链表节点中；如果需要进位，保存个位，标记进位数字。